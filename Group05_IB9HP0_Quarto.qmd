---
title: "Data Management Group Assignment"
author: "DM Group 5"
format: pdf
editor: visual
---

# Contents

1.  Database Design and Implementation
2.  Data Generation and Management
3.  Data Pipeline Generation
4.  Data Analysis

## Database Design and Implementation

#### 1.1 E-R Diagram Design:

1.  E-R Diagram:\
    We created an Entity-Relationship diagram for an e-commerce store by first identifying a total of 7 key entities namely suppliers, customers, products, product categories, order details, transactions and promotions. Relationships were created to better define the connection between two entities which included provide, belong to, order and make. Attributes were created to detail the information held within every entity. Order relationship was given multiple attributes to better explain the nature of the relationship. After analysis of the ER diagram, to efficiently define the data held within shipping address attribute, it was given further attributes and used as a composite attribute for order details.\
    \
    Assumptions:

    -   The e-commerce store is based in the UK.
    -   Multiple suppliers provide multiple products.
    -   Multiple products belong to a single product category.
    -   Multiple customers can order multiple products.
    -   Multiple customers can make multiple transactions.
    -   Multiple products can be contained in a single order detail.
    -   Multiple promotions can be applied to multiple products.

    ![Entity-Relationship Diagram](E-R%20Diagram/E-R%20Diagram.jpeg){fig-align="left" width="644"}

2.  Relationship Sets:

    ![Suppliers PROVIDE products. Many-to-many relationship (M:N).](Relationship%20Sets/Suppliers%20PROVIDE%20products.png "Many-to-many relationship (M:N)."){fig-align="center" width="271"}

    ![Products BELONG TO Product Categories. Many-to-one relationship (N:1).](Relationship%20Sets/Products%20BELONG%20TO%20Product%20Categories.png "Many-to-one relationship (N:1)."){fig-align="center" width="373"}

    ![Customers ORDER products. Many-to-many relationship (M:N).](Relationship%20Sets/Customers%20ORDER%20products.png "Many-to-many relationship (M:N)."){fig-align="center" width="348"}

    ![Customers MAKE Transaction. Many-to-many relationship (M:N).](Relationship%20Sets/Customers%20MAKE%20Transaction.png "Many-to-many relationship (M:N)."){fig-align="center" width="357"}

    ![Order Details CONTAIN Products. One-to-many relationship (1:N).](Relationship%20Sets/Order%20Details%20CONTAIN%20Products.png "One-to-many relationship (1:N)."){fig-align="center" width="369"}

    ![Products HAVE Promotions. Many-to-many relationship (N:M).](Relationship%20Sets/Products%20HAVE%20Promotions.png "Many-to-many relationship (N:M)."){fig-align="center" width="382"}

#### 1.2 SQL Database Schema Creation:

![Logical Database Schema](Logical%20Database%20Schema/Logical%20Database%20Schema.jpg "Logical Database Schema"){fig-align="center"}

![Logical Schema Table](Logical%20Schema%20Table/Logical%20Schema%20Table.png "Logical Schema Table"){width="601"}

+------------------------+---------------------+-----------------------------------------+
| Entity                 | Attribute           | Description                             |
+:=======================+:====================+:========================================+
| 1.  Suppliers          | supplier_ID         | Primary Key                             |
|                        |                     |                                         |
|                        |                     | Identifier for each unique supplier     |
+------------------------+---------------------+-----------------------------------------+
|                        | supplier_name       | Name of the supplier                    |
+------------------------+---------------------+-----------------------------------------+
|                        | supplier_email      | Email Address of the supplier           |
+------------------------+---------------------+-----------------------------------------+
|                        |                     |                                         |
+------------------------+---------------------+-----------------------------------------+
| 2.  Products           | product_id          | Primary Key                             |
|                        |                     |                                         |
|                        |                     | Identifier for each unique Product      |
+------------------------+---------------------+-----------------------------------------+
|                        | category_id         | Foreign Key                             |
|                        |                     |                                         |
|                        |                     | Identifier for product categories\      |
|                        |                     | since product has a\                    |
|                        |                     | many-to-one cardinality (N:1)\          |
|                        |                     | with product categories                 |
+------------------------+---------------------+-----------------------------------------+
|                        | supplier_id         | Foreign Key                             |
|                        |                     |                                         |
|                        |                     | Identifier for suppliers\               |
|                        |                     | since product has a\                    |
|                        |                     | many-to-many cardinality (N:M)\         |
|                        |                     | with suppliers                          |
+------------------------+---------------------+-----------------------------------------+
|                        | product_sku         | Unique code assigned to\                |
|                        |                     | each product for inventory tracking\    |
|                        |                     | and management                          |
+------------------------+---------------------+-----------------------------------------+
|                        | product_name        | Name of the product                     |
+------------------------+---------------------+-----------------------------------------+
|                        | price               | Price of the product                    |
+------------------------+---------------------+-----------------------------------------+
|                        | product_quantity    | Number of products                      |
+------------------------+---------------------+-----------------------------------------+
|                        | product_description | Short Description\                      |
|                        |                     | of the product                          |
+------------------------+---------------------+-----------------------------------------+
|                        |                     |                                         |
+------------------------+---------------------+-----------------------------------------+
| 3.  Product Categories | category_id         | Primary Key                             |
|                        |                     |                                         |
|                        |                     | Identifier for each unique\             |
|                        |                     | product category                        |
+------------------------+---------------------+-----------------------------------------+
|                        | category_name       | Name of the product category            |
+------------------------+---------------------+-----------------------------------------+
|                        |                     |                                         |
+------------------------+---------------------+-----------------------------------------+
| 4.  Customers          | customer_id         | Primary Key                             |
|                        |                     |                                         |
|                        |                     | Identifier for each unique customer     |
+------------------------+---------------------+-----------------------------------------+
|                        | first_name          | First Name of the customer              |
+------------------------+---------------------+-----------------------------------------+
|                        | last_name           | Last Name of the customer               |
+------------------------+---------------------+-----------------------------------------+
|                        | email               | Email Address of the customer           |
+------------------------+---------------------+-----------------------------------------+
|                        | password            | Account Password of the customer        |
+------------------------+---------------------+-----------------------------------------+
|                        | phone_number        | Phone Number of the customer            |
+------------------------+---------------------+-----------------------------------------+
|                        |                     |                                         |
+------------------------+---------------------+-----------------------------------------+
| 5.  Transactions       | transaction_id      | Primary Key                             |
|                        |                     |                                         |
|                        |                     | Identifier for each unique\             |
|                        |                     | transaction                             |
+------------------------+---------------------+-----------------------------------------+
|                        | customer_id         | Foreign Key                             |
|                        |                     |                                         |
|                        |                     | Identifier for customers\               |
|                        |                     | since transactions has a\               |
|                        |                     | many-to-many cardinality (N:M)\         |
|                        |                     | with product categories                 |
+------------------------+---------------------+-----------------------------------------+
|                        | order_id            | Foreign Key                             |
|                        |                     |                                         |
|                        |                     | Identifier for Orders\                  |
|                        |                     | since multiple transactions\            |
|                        |                     | can have multiple orders.               |
+------------------------+---------------------+-----------------------------------------+
|                        | receipt_invoice     | Invoice of the transaction              |
+------------------------+---------------------+-----------------------------------------+
|                        | transaction_method  | Chosen method of transaction            |
+------------------------+---------------------+-----------------------------------------+
|                        | transaction_date    | Date of transaction                     |
+------------------------+---------------------+-----------------------------------------+
|                        |                     |                                         |
+------------------------+---------------------+-----------------------------------------+
| 6.  Promotions         | promotion_id        | Primary Key                             |
|                        |                     |                                         |
|                        |                     | Identifier for each\                    |
|                        |                     | unique promotion                        |
+------------------------+---------------------+-----------------------------------------+
|                        | discount_code       | Unique code for the discount            |
+------------------------+---------------------+-----------------------------------------+
|                        | discount_rate       | Percentage of discount                  |
+------------------------+---------------------+-----------------------------------------+
|                        | discount_start_date | Start date of the discount              |
+------------------------+---------------------+-----------------------------------------+
|                        | discount_end_date   | End Date of the discount                |
+------------------------+---------------------+-----------------------------------------+
|                        |                     |                                         |
+------------------------+---------------------+-----------------------------------------+
| 7.  Order details      | order_detail_id     | Primary Key                             |
|                        |                     |                                         |
|                        |                     | Identifier for each unique Order detail |
+------------------------+---------------------+-----------------------------------------+
|                        | order_id            | Foreign Key                             |
|                        |                     |                                         |
|                        |                     | Identifier for Orders since\            |
|                        |                     | multiple order details can\             |
|                        |                     | have multiple orders.                   |
+------------------------+---------------------+-----------------------------------------+
|                        | product_id          | Foreign Key                             |
|                        |                     |                                         |
|                        |                     | Identifier for Products since\          |
|                        |                     | multiple order details can\             |
|                        |                     | have multiple order details.            |
+------------------------+---------------------+-----------------------------------------+
|                        | total_price         | Total price of all the orders           |
+------------------------+---------------------+-----------------------------------------+
|                        | order_quantity      | Number of orders                        |
+------------------------+---------------------+-----------------------------------------+
|                        | shipping_address    | Composite attribute containing\         |
|                        |                     | address line 1 and address line 2       |
|                        |                     |                                         |
|                        |                     | Delivery address of the order           |
+------------------------+---------------------+-----------------------------------------+
|                        | city                | City location of the order              |
+------------------------+---------------------+-----------------------------------------+
|                        | postcode            | Postal code of the location             |
+------------------------+---------------------+-----------------------------------------+

: Entity Attribute Data Dictionary

+---------------+------------------------+-------------------------------------+
| Relationship  | Attribute              | Description                         |
+:==============+:=======================+:====================================+
| Order         | order_id               | Primary Key                         |
|               |                        |                                     |
|               |                        | Identifier for each unique Order    |
+---------------+------------------------+-------------------------------------+
|               | customer_id            | Foreign Key                         |
|               |                        |                                     |
|               |                        | Identifier for customers since\     |
|               |                        | multiple orders can come\           |
|               |                        | from multiple orders.               |
+---------------+------------------------+-------------------------------------+
|               | order_date             | Date of order placement             |
+---------------+------------------------+-------------------------------------+
|               | estimate_delivery_date | Delivery date of the order          |
+---------------+------------------------+-------------------------------------+
|               | order_status           | Classification of the order\        |
|               |                        | depending on its current status\    |
|               |                        | i.e., shipped, cancelled or pending |
+---------------+------------------------+-------------------------------------+

: Relationship Attribute Data Dictionary

## Data Generation and Management

#### 2.1 Synthetic Data Generation:

To generate synthetic data for our e-commerce database, we utilised ChatGPT. Our approach involved providing ChatGPT with detailed prompts specifying the attributes, relationships, and constraints relevant to each database entity. These prompts ensured that the data generated would reflect realistic e-commerce scenarios while maintaining consistency across entities. 

Customers:\
We constrained the "Customers" dataset to consist of UK phone numbers, as well as names with matching emails, ensuring a dataset that would closely resemble an actual customer database in the UK. See the following prompt:

![Customers Prompt.](Prompts/Customers.png "Customers Prompt"){width="606"}

Suppliers:\
In the "Suppliers" data set, we ensured that supplier names matched email formats. See the following prompt:

![Suppliers Prompt.](Prompts/Suppliers.png "Suppliers Prompt"){width="606"}

Product Categories:\
The prompt is for the generation of "Product Categories", with 8 unique category identifiers and corresponding names across 8 entries. See the following prompt:

![Product Categories Prompt.](Prompts/Product%20Categories.png "Product Categories Prompt"){width="606"}

Promotions:\
For the "Promotions" entity, we focused on generating realistic discount codes and rates, alongside logically constrained start, and end dates for the discounts. See the following prompt:

![Promotions Prompt.](Prompts/Promotions.png "Promotions Prompt"){width="606"}

Products:\
The prompt describes generating a "Products" dataset for an e-commerce platform, featuring unique product IDs, associated category and supplier IDs, product names, SKUs, descriptions, prices, and stock quantities, across 1000 rows. See the following prompt:

![Products Prompt.](Prompts/Products.png "Products Prompt"){width="606"}

Orders and Order Details:\
This prompt outlines the creation of two interconnected datasets, "Orders" and "Order Details," for an e-commerce platform, necessitating their simultaneous generation to maintain consistency. Within the datasets, we focused on imitating a realistic relationship between orders, customers, and products while incorporating accurate order statuses and delivery timelines. See the following prompt:

![Orders and Order Details Prompt.](Prompts/Orders%20and%20Order%20Details.png "Orders and Order Details Prompt"){width="437"}

Transactions:\
In this prompt, we linked each transaction to customer and order details, including distinct invoice numbers and specific payment methods, while aligning transaction dates with their respective order dates. See the following prompt:

![Transactions Prompt.](Prompts/Transactions.png "Transactions Prompt"){width="552"}

The following prompts enabled us to generate 8 datasets for each entity, setting a strong foundation for robust analysis, given the realistic constraints and patterns put in place.

#### 2.2 Data Import and Quality Assurance

After uploading the data files, the rows and columns of each dataset was displayed using the below code:

```{r}
data_files <- list.files("data_uploads/Dataset/")

suffix <- "-Table 1"

# Rename files
for (file in data_files) {
  # Create a new filename
  new_filename <- paste0("data_uploads/Dataset/", gsub(suffix, "", file))
  file <- paste0("data_uploads/Dataset/", file)
  # Rename the file
  file.rename(from = file, to = new_filename)
}
```

To import the data sets into the SQLite database, we used the below code:

```{r}
data_files <- list.files("data_uploads/Dataset/")

db_connection <- RSQLite::dbConnect(RSQLite::SQLite(),"ecommerce.db")

# To display the rows and columns of each dataset and 
# To import each csv file into the database table
for (file in data_files) {
  this_filepath <- paste0("data_uploads/Dataset/", file)
  this_file_contents <- readr::read_csv(this_filepath)
  
  number_of_rows <- nrow(this_file_contents)
  number_of_columns <- ncol(this_file_contents)
  
  #To print the number of columns and rows of each dataset
  print(paste0("The file: ",file,
               " has: ",
               format(number_of_rows,big.mark = ","),
               " rows and ",
               number_of_columns," columns"))
  
  table_name <- gsub(".csv","",file)
  
  #Writing the csv file contents to the database and
  #creating the table with the table_name
  RSQLite::dbWriteTable(db_connection,table_name,this_file_contents,overwrite=TRUE)
  
  #To list the database tables
  RSQLite::dbListTables(db_connection)
}

RSQLite::dbDisconnect(db_connection)
```

Populate SQL database:\
While constructing the schema for our SQL database, we focused on defining the data types and structures that would best represent the nature of each field. Data types such as VARCHAR were chosen to impose limits on the length of text-based fields. Meanwhile, for numerical fields, INT and DECIMAL types were used to accurately capture integer and floating-point numbers, respectively. By carefully aligning data types with the intended data structure, we create a framework that ensures data is stored in an organised manner.

Customers Data Validation Code:

```{r}
dbExecute(db_connection, "DROP TABLE IF EXISTS customers")
customers <- "
CREATE TABLE IF NOT EXISTS 'customers' (
  'customer_id' INT PRIMARY KEY, 
  'first_name' VARCHAR(50) NOT NULL, 
  'last_name' VARCHAR(50) NOT NULL,
  'email' VARCHAR(100) NOT NULL, 
  'password' VARCHAR(100) NOT NULL, 
  'phone_number' VARCHAR(20) NOT NULL, 
);
"
```

Suppliers Data Validation Code:

```{r}
dbExecute(db_connection, "DROP TABLE IF EXISTS suppliers")
suppliers <- "
CREATE TABLE IF NOT EXISTS 'suppliers' (
  'supplier_id' INT PRIMARY KEY,
  'supplier_name' VARCHAR(100) NOT NULL,
  'supplier_email' VARCHAR(100) NOT NULL
);
"
```

Product Categories Data Validation Code:

```{r}
dbExecute(db_connection, "DROP TABLE IF EXISTS product_categories")
product_categories <- "
CREATE TABLE IF NOT EXISTS 'product_categories' (
  'category_id' INT PRIMARY KEY,
  'category_name' VARCHAR(50) NOT NULL,
);
"
```

Promotions Data Validation Code:

```{r}
dbExecute(db_connection, "DROP TABLE IF EXISTS promotion")
promotion <- "
CREATE TABLE IF NOT EXISTS 'promotion'(
  'promotion_id' INT PRIMARY KEY,
  'discount_start_date' DATE NOT NULL,
  'discount_end_date' DATE NOT NULL,
  'discount_code' VARCHAR(20),
  'discount_rate' VARCHAR(3)
);
"
```

Products Data Validation Code:

```{r}
dbExecute(db_connection, "DROP TABLE IF EXISTS products")
products <- "
CREATE TABLE IF NOT EXISTS 'products' (
  'product_id' INT PRIMARY KEY,
  'category_id' INT NOT NULL,
  'supplier_id' INT NOT NULL,
  'product_name' VARCHAR(100) NOT NULL,
  'product_sku' VARCHAR(20),
  'product_description' VARCHAR(500),
  'price' DECIMAL(1000,2) NOT NULL,
  'product_quantity' INT,
  FOREIGN KEY ('category_id')
  REFERENCES product_categories ('category_id'),
  FOREIGN KEY ('supplier_id')
  REFERENCES suppliers ('supplier_id')
);
"
```

Orders Data Validation Code:

```{r}
dbExecute(db_connection, "DROP TABLE IF EXISTS orders")
orders <- "
CREATE TABLE IF NOT EXISTS 'orders'(
  'order_id' INT PRIMARY KEY,
  'customer_id' INT NOT NULL,
  'estimated_delivery_date' DATE NOT NULL,
  'order_date' DATE NOT NULL,
  'order_status' VARCHAR(100) NOT NULL,
  'total_price' INT NOT NULL,
  FOREIGN KEY('customer_id')
  REFERENCES customers('customer_id'),
  FOREIGN KEY('shipping_address_id')
  REFERENCES addresses('address_id')
);
"
```

Order Details Data Validation Code:

```{r}
dbExecute(db_connection, "DROP TABLE IF EXISTS order_details")
order_details <- "
CREATE TABLE IF NOT EXISTS 'order_details' (
  'order_detail_id' INT PRIMARY KEY,
  'order_id' INT NOT NULL,
  'product_id' INT NOT NULL, 
  'order_quantity' INT, 
  'product_price' DECIMAL(10, 2) NOT NULL,
  'shipping_address' VARCHAR(250) NOT NULL,
  'city' VARCHAR(50) NOT NULL,
  'postcode' VARCHAR(10) NOT NULL,
  FOREIGN KEY ('product_id')
  REFERENCES products ('product_id'),
  FOREIGN KEY ('order_id')
  REFERENCES orders ('order_id')
);
"
```

Transactions Data Validation Code:

```{r}
dbExecute(db_connection, "DROP TABLE IF EXISTS transactions")
transactions <- "
CREATE TABLE IF NOT EXISTS 'transactions' (
  'transaction_id' INT PRIMARY KEY,
  'customer_id' INT NOT NULL,
  'order_id' INT NOT NULL,
  'receipt_invoice' VARCHAR(20) NOT NULL,
  'transaction_method' TEXT NOT NULL,
  'transaction_date' DATE NOT NULL,
  FOREIGN KEY ('customer_id') 
  REFERENCES customers('customer_id'),
  FOREIGN KEY ('order_id') 
  REFERENCES orders('order_id')
);
"
```

Data Validation-Quarto:\
We employed a series of data validation checks to ensure data quality and assess data integrity. Below are the steps taken as well as their outcomes.

Primary Key Validation:\
We verified that the first column of each dataset contained unique identifiers, which is essential for primary keys. Our validation checks confirmed that there were no duplicate entries, ensuring the integrity of our data model.

Duplicate Entries Check: \
Our script checked for duplicates in the first column, designed to flag any replication of primary keys. The results confirmed that each dataset had unique identifiers across all entries.

Phone Number Format Check:\
The following code verifies the format of phone number within the \`’Customers” dataset to ensure that they adhere to the specified UK format (+44 7XXX-XXX-XXX). Results suggest the correctness of each phone number, confirming that they align with the format.

Missing Values Assessment:\
The script aims to detect missing values in any column. The results imply that no missing values were identified across all entries, thus confirming a complete dataset.

Email Format Verification:\
We executed a script to ensure that email addresses within out data set follow a certain format of [firstname.lastname\@email.com](mailto:firstname.lastname@email.com). The test ensures that all email formats are correct following the specified pattern.

## Data Pipeline Generation

#### 3.1 Github Repository and Workflow Setup

ETL (Extract, transform, load)

```{r}

```

#### 3.2 Github Actions for Continuous Integration

4.  Data Analysis
